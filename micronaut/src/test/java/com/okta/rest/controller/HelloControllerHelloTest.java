// ********RoostGPT********
/*
Test generated by RoostGPT for test gradle-testing using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=hello_7b02812cc7
ROOST_METHOD_SIG_HASH=hello_be3b337025

Scenario 1: Test with valid Principal
Details:  
  TestName: testHelloWithValidPrincipal.
  Description: This test is meant to check the functionality of the hello method with a valid Principal object. It is targeting the normal scenario where the Principal object is not null and has a valid name. 
Execution:
  Arrange: Create a mock Principal object with a valid name.
  Act: Invoke the hello method with the mock Principal object.
  Assert: Use JUnit assertions to compare the returned string with the expected greeting string.
Validation: 
  The assertion aims to verify that the hello method correctly concatenates the Principal's name with the greeting. The expected result is based on the method's implementation. This test is significant as it checks the basic functionality of the hello method.

Scenario 2: Test with null Principal
Details:  
  TestName: testHelloWithNullPrincipal.
  Description: This test is meant to check the functionality of the hello method when the Principal object is null. It is targeting the edge case scenario where the Principal object is null. 
Execution:
  Arrange: No need to arrange any data as the Principal object is null.
  Act: Invoke the hello method with null as the Principal object.
  Assert: Use JUnit assertions to expect an exception (NullPointerException) to be thrown.
Validation: 
  The assertion aims to verify that the hello method throws an exception when the Principal object is null. The expected result is based on the fact that calling a method on a null object should throw a NullPointerException. This test is significant as it checks the hello method's error handling when dealing with null input.

Scenario 3: Test with Principal having empty name
Details:  
  TestName: testHelloWithEmptyNamePrincipal.
  Description: This test is meant to check the functionality of the hello method when the Principal object has an empty name. It is targeting the edge case scenario where the Principal's name is an empty string. 
Execution:
  Arrange: Create a mock Principal object with an empty name.
  Act: Invoke the hello method with the mock Principal object.
  Assert: Use JUnit assertions to compare the returned string with the expected greeting string.
Validation: 
  The assertion aims to verify that the hello method correctly handles the case where the Principal's name is empty. The expected result is based on the method's implementation. This test is significant as it checks the hello method's functionality when dealing with edge case inputs.
*/

// ********RoostGPT********
package com.okta.rest.controller;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.security.Principal;
import io.micronaut.http.MediaType;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.Produces;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;

public class HelloControllerHelloTest {
    private HelloController controller;
    private Principal principal;
    @Before
    public void setup() {
        controller = new HelloController();
        principal = Mockito.mock(Principal.class);
    }
    @Test
    public void testHelloWithValidPrincipal() {
        Mockito.when(principal.getName()).thenReturn("John");
        String result = controller.hello(principal);
        assertEquals("Hello, John!", result);
    }
    @Test
    public void testHelloWithNullPrincipal() {
        assertThrows(NullPointerException.class, () -> {
            controller.hello(null);
        });
    }
    @Test
    public void testHelloWithEmptyNamePrincipal() {
        Mockito.when(principal.getName()).thenReturn("");
        String result = controller.hello(principal);
        assertEquals("Hello, !", result);
    }
}