// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Positive Scenario: Test with a valid Principal object
   - Given a valid Principal object with a defined name
   - When the hello function is called
   - Then it should return the correct greeting message

2. Negative Scenario: Test with a null Principal object
   - Given a null Principal object
   - When the hello function is called
   - Then it should throw a NullPointerException

3. Negative Scenario: Test with a Principal object having a null name
   - Given a Principal object with null name
   - When the hello function is called
   - Then it should return a greeting message with null in place of the name

4. Positive Scenario: Test with a Principal object with an empty name
   - Given a Principal object with an empty name
   - When the hello function is called
   - Then it should return a greeting message with an empty name

5. Positive Scenario: Test with a Principal object having a name with special characters
   - Given a Principal object with a name containing special characters
   - When the hello function is called
   - Then it should return a greeting message with the special characters in the name

6. Positive Scenario: Test with a Principal object having a name with spaces
   - Given a Principal object with a name containing spaces
   - When the hello function is called
   - Then it should return a greeting message with the spaces in the name

7. Positive Scenario: Test with a Principal object having a long name
   - Given a Principal object with a long name
   - When the hello function is called
   - Then it should return a greeting message with the entire long name

Note: These scenarios are based on the assumption that the Principal object is from java.security.Principal and getName() returns a string. Depending on the actual implementation, additional scenarios may need to be considered.
*/

// ********RoostGPT********
package com.okta.rest.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import java.security.Principal;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class HelloController_hello_be3b337025_Test {

    @Mock
    private Principal principal;

    @Test
    public void testHello_givenValidPrincipal() {
        HelloController helloController = new HelloController();
        when(principal.getName()).thenReturn("John");
        String result = helloController.hello(principal);
        assertEquals("Hello, John!", result);
    }

    @Test(expected = NullPointerException.class)
    public void testHello_givenNullPrincipal() {
        HelloController helloController = new HelloController();
        helloController.hello(null);
    }

    @Test
    public void testHello_givenNullNamePrincipal() {
        HelloController helloController = new HelloController();
        when(principal.getName()).thenReturn(null);
        String result = helloController.hello(principal);
        assertEquals("Hello, null!", result);
    }

    @Test
    public void testHello_givenEmptyNamePrincipal() {
        HelloController helloController = new HelloController();
        when(principal.getName()).thenReturn("");
        String result = helloController.hello(principal);
        assertEquals("Hello, !", result);
    }

    @Test
    public void testHello_givenSpecialCharacterNamePrincipal() {
        HelloController helloController = new HelloController();
        when(principal.getName()).thenReturn("@#$%^&*");
        String result = helloController.hello(principal);
        assertEquals("Hello, @#$%^&*!", result);
    }

    @Test
    public void testHello_givenSpaceNamePrincipal() {
        HelloController helloController = new HelloController();
        when(principal.getName()).thenReturn("John Doe");
        String result = helloController.hello(principal);
        assertEquals("Hello, John Doe!", result);
    }

    @Test
    public void testHello_givenLongNamePrincipal() {
        HelloController helloController = new HelloController();
        when(principal.getName()).thenReturn("JohnJacobJingleheimerSchmidt");
        String result = helloController.hello(principal);
        assertEquals("Hello, JohnJacobJingleheimerSchmidt!", result);
    }
}
