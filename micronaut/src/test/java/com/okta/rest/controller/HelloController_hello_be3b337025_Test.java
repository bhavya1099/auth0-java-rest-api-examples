// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Positive Scenario: Test with a valid Principal object. 
   - Create a Principal object with a valid name.
   - Invoke the hello method with the Principal object.
   - Verify that the returned string is "Hello, [Principal's Name]!".

2. Negative Scenario: Test with a null Principal object. 
   - Invoke the hello method with a null Principal object.
   - Verify if the code handles null values correctly, possibly by returning a default message or throwing an appropriate exception.

3. Negative Scenario: Test with a Principal object having a null or empty name. 
   - Create a Principal object with a null or empty name.
   - Invoke the hello method with the Principal object.
   - Verify if the code handles such cases correctly, possibly by returning a default message or throwing an appropriate exception.

4. Positive Scenario: Test with a Principal object having special characters in the name. 
   - Create a Principal object with a name containing special characters.
   - Invoke the hello method with the Principal object.
   - Verify that the returned string correctly includes the special characters.

5. Positive Scenario: Test with a Principal object having a name in different languages (UTF-8 characters). 
   - Create a Principal object with a name in a language other than English.
   - Invoke the hello method with the Principal object.
   - Verify that the returned string correctly includes the UTF-8 characters.

6. Security Scenario: Test the method's response when invoked by a user without the necessary security permissions. 
   - Invoke the hello method with a Principal object corresponding to a user without the necessary permissions.
   - Verify that the security rules correctly prevent access to the method.

7. Performance Scenario: Test the method's response time.
   - Invoke the hello method with a Principal object.
   - Verify that the method's response time is within acceptable parameters, ensuring the function performs efficiently.
*/

// ********RoostGPT********
package com.okta.rest.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.security.Principal;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class HelloController_hello_be3b337025_Test {

    @Mock
    private Principal mockPrincipal;

    @Test
    public void testHello_validPrincipal() {
        // Arrange
        when(mockPrincipal.getName()).thenReturn("John Doe");
        HelloController controller = new HelloController();

        // Act
        String result = controller.hello(mockPrincipal);

        // Assert
        assertNotNull(result);
        assertEquals("Hello, John Doe!", result);
    }

    @Test(expected = NullPointerException.class)
    public void testHello_nullPrincipal() {
        // Arrange
        HelloController controller = new HelloController();

        // Act
        controller.hello(null);

        // Assert: Expect NullPointerException to be thrown
    }

    @Test
    public void testHello_emptyPrincipalName() {
        // Arrange
        when(mockPrincipal.getName()).thenReturn("");
        HelloController controller = new HelloController();

        // Act
        String result = controller.hello(mockPrincipal);

        // Assert
        assertNotNull(result);
        assertEquals("Hello, !", result);
    }

    @Test
    public void testHello_principalWithSpecialChars() {
        // Arrange
        when(mockPrincipal.getName()).thenReturn("@John$Doe");
        HelloController controller = new HelloController();

        // Act
        String result = controller.hello(mockPrincipal);

        // Assert
        assertNotNull(result);
        assertEquals("Hello, @John$Doe!", result);
    }

    @Test
    public void testHello_principalWithNonEnglishName() {
        // Arrange
        when(mockPrincipal.getName()).thenReturn("Jürgen");
        HelloController controller = new HelloController();

        // Act
        String result = controller.hello(mockPrincipal);

        // Assert
        assertNotNull(result);
        assertEquals("Hello, Jürgen!", result);
    }
}
