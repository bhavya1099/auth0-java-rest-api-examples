// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Positive Scenario: Test with a valid Principal object
   - Given a valid Principal object with a defined name
   - When the hello function is called
   - Then it should return the correct greeting message

2. Negative Scenario: Test with a null Principal object
   - Given a null Principal object
   - When the hello function is called
   - Then it should throw a NullPointerException

3. Negative Scenario: Test with a Principal object having a null name
   - Given a Principal object with null name
   - When the hello function is called
   - Then it should return a greeting message with null in place of the name

4. Positive Scenario: Test with a Principal object with an empty name
   - Given a Principal object with an empty name
   - When the hello function is called
   - Then it should return a greeting message with an empty name

5. Positive Scenario: Test with a Principal object having a name with special characters
   - Given a Principal object with a name containing special characters
   - When the hello function is called
   - Then it should return a greeting message with the special characters in the name

6. Positive Scenario: Test with a Principal object having a name with spaces
   - Given a Principal object with a name containing spaces
   - When the hello function is called
   - Then it should return a greeting message with the spaces in the name

7. Positive Scenario: Test with a Principal object having a long name
   - Given a Principal object with a long name
   - When the hello function is called
   - Then it should return a greeting message with the entire long name

Note: These scenarios are based on the assumption that the Principal object is from java.security.Principal and getName() returns a string. Depending on the actual implementation, additional scenarios may need to be considered.
*/

// ********RoostGPT********
package com.okta.rest.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.security.Principal;
import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(Parameterized.class)
public class HelloController_hello_be3b337025_Test {

    private final String expectedMessage;
    private final Principal principal;

    public HelloController_hello_be3b337025_Test(String expectedMessage, Principal principal) {
        this.expectedMessage = expectedMessage;
        this.principal = principal;
    }

    @Parameters
    public static Collection<Object[]> data() {
        Principal validPrincipal = mock(Principal.class);
        when(validPrincipal.getName()).thenReturn("John");

        Principal nullNamePrincipal = mock(Principal.class);
        when(nullNamePrincipal.getName()).thenReturn(null);

        Principal emptyNamePrincipal = mock(Principal.class);
        when(emptyNamePrincipal.getName()).thenReturn("");

        Principal specialCharNamePrincipal = mock(Principal.class);
        when(specialCharNamePrincipal.getName()).thenReturn("@John#");

        Principal spaceNamePrincipal = mock(Principal.class);
        when(spaceNamePrincipal.getName()).thenReturn("John Doe");

        Principal longNamePrincipal = mock(Principal.class);
        when(longNamePrincipal.getName()).thenReturn("JohnDoeJohnDoeJohnDoeJohnDoeJohnDoe");

        return Arrays.asList(new Object[][] {
                { "Hello, John!", validPrincipal },
                { "Hello, null!", nullNamePrincipal },
                { "Hello, !", emptyNamePrincipal },
                { "Hello, @John#!", specialCharNamePrincipal },
                { "Hello, John Doe!", spaceNamePrincipal },
                { "Hello, JohnDoeJohnDoeJohnDoeJohnDoeJohnDoe!", longNamePrincipal },
                { "Hello, null!", null }
        });
    }

    @Test
    public void testHello() {
        HelloController controller = new HelloController();
        String actualMessage = controller.hello(principal);
        assertEquals(expectedMessage, actualMessage);
    }
}
