// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Positive Scenario: If the Principal object is valid and has a name, the function should return "Hello, [Principal's Name]!".
2. Negative Scenario: If the Principal object is null, the function should handle the null pointer exception.
3. Negative Scenario: If the Principal object is valid but has no name or an empty name, the function should return "Hello, !".
4. Positive Scenario: If the Principal object has special characters or numbers in the name, the function should correctly concatenate them and return the greeting message.
5. Positive Scenario: If the Principal object has a long name, the function should correctly concatenate and return the whole greeting message without any truncation.
6. Security Scenario: If the function is accessed without proper security credentials, it should deny access as per the @Secured annotation.
7. Security Scenario: If the function is accessed with proper security credentials, it should allow access and return the expected greeting message.
8. Positive Scenario: If the function is accessed multiple times with the same Principal object, it should return the same greeting message every time.
9. Negative Scenario: If the function is accessed concurrently, it should handle the concurrent requests and return the correct greeting messages.
10. Performance Scenario: Check the performance of the function by passing a high volume of requests and ensure it responds within acceptable time limits.
11. Content-Type Scenario: The function should produce the response in the MediaType defined by the @Produces annotation.

*/

// ********RoostGPT********
package com.okta.rest.controller;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import java.security.Principal;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;

public class HelloController_hello_be3b337025_Test {

    private HelloController helloController;
    private Principal mockPrincipal;

    @Before
    public void setup() {
        helloController = new HelloController();
        mockPrincipal = Mockito.mock(Principal.class);
    }

    @Test
    public void testHello_ValidPrincipal() {
        when(mockPrincipal.getName()).thenReturn("John");
        String result = helloController.hello(mockPrincipal);
        assertNotNull(result);
        assertEquals("Hello, John!", result);
    }

    @Test(expected = NullPointerException.class)
    public void testHello_NullPrincipal() {
        helloController.hello(null);
    }

    @Test
    public void testHello_EmptyNamePrincipal() {
        when(mockPrincipal.getName()).thenReturn("");
        String result = helloController.hello(mockPrincipal);
        assertNotNull(result);
        assertEquals("Hello, !", result);
    }

    @Test
    public void testHello_SpecialCharNamePrincipal() {
        when(mockPrincipal.getName()).thenReturn("$pec!@l");
        String result = helloController.hello(mockPrincipal);
        assertNotNull(result);
        assertEquals("Hello, $pec!@l!", result);
    }

    @Test
    public void testHello_LongNamePrincipal() {
        when(mockPrincipal.getName()).thenReturn("ThisIsAVeryLongNameForAPrincipal");
        String result = helloController.hello(mockPrincipal);
        assertNotNull(result);
        assertEquals("Hello, ThisIsAVeryLongNameForAPrincipal!", result);
    }
}
