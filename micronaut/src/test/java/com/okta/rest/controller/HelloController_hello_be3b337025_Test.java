// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Positive Scenario: Test with a valid Principal object. 
   - Create a Principal object with a valid name.
   - Invoke the hello method with the Principal object.
   - Verify that the returned string is "Hello, [Principal name]!".

2. Negative Scenario: Test with a null Principal object. 
   - Invoke the hello method with a null object.
   - Verify whether the method handles the null object properly or throws an appropriate exception.

3. Negative Scenario: Test with a Principal object having null name.
   - Create a Principal object with a null name.
   - Invoke the hello method with the Principal object.
   - Verify whether the method handles the null name properly or throws an appropriate exception.

4. Negative Scenario: Test with a Principal object having empty name.
   - Create a Principal object with an empty string as name.
   - Invoke the hello method with the Principal object.
   - Verify whether the method handles the empty string properly or returns "Hello, !".

5. Positive Scenario: Test with a Principal object having special characters in the name.
   - Create a Principal object with a name containing special characters.
   - Invoke the hello method with the Principal object.
   - Verify that the returned string is "Hello, [Principal name]!".

6. Positive Scenario: Test with a Principal object having whitespace in the name.
   - Create a Principal object with a name containing whitespace.
   - Invoke the hello method with the Principal object.
   - Verify that the returned string is "Hello, [Principal name]!".

7. Positive Scenario: Test with a Principal object having a long name.
   - Create a Principal object with a long name.
   - Invoke the hello method with the Principal object.
   - Verify that the returned string is "Hello, [Principal name]!". 

8. Security Scenario: Test the security rule applied to the method.
   - Invoke the hello method without proper authentication.
   - Verify that the method returns a security error or exception.
*/

// ********RoostGPT********
package com.okta.rest.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.mockito.Mockito;
import java.security.Principal;
import java.util.Arrays;
import java.util.Collection;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

@RunWith(Parameterized.class)
public class HelloController_hello_be3b337025_Test {

    private String input;
    private String expectedOutput;

    public HelloController_hello_be3b337025_Test(String input, String expectedOutput) {
        this.input = input;
        this.expectedOutput = expectedOutput;
    }

    @Parameterized.Parameters
    public static Collection<Object[]> testCases() {
        return Arrays.asList(new Object[][]{
                {"John", "Hello, John!"},
                {"", "Hello, !"},
                {null, "Hello, null!"}
        });
    }

    @Test
    public void testHello() {
        Principal mockPrincipal = Mockito.mock(Principal.class);
        Mockito.when(mockPrincipal.getName()).thenReturn(input);

        HelloController controller = new HelloController();
        assertEquals(expectedOutput, controller.hello(mockPrincipal));
    }

    @Test
    public void testHello_withNullPrincipal() {
        HelloController controller = new HelloController();
        assertThrows(NullPointerException.class, () -> controller.hello(null));
    }
}
