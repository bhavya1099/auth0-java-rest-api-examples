// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Positive Scenario: Test with a valid Principal object. 
   - Create a Principal object with a valid name.
   - Call the hello function with the Principal object.
   - Verify that the returned string is "Hello, [Principal name]!".

2. Negative Scenario: Test with a null Principal object. 
   - Call the hello function with a null object.
   - Verify whether the function handles the null object properly or throws an appropriate exception.

3. Negative Scenario: Test with a Principal object having null or empty name. 
   - Create a Principal object with a null or empty name.
   - Call the hello function with the Principal object.
   - Verify whether the function handles the null or empty name properly or throws an appropriate exception.

4. Edge Scenario: Test with a Principal object having special characters or numbers in the name. 
   - Create a Principal object with a name containing special characters or numbers.
   - Call the hello function with the Principal object.
   - Verify that the returned string is "Hello, [Principal name]!".

5. Security Scenario: Test if the function respects the security constraints.
   - Try to call the function without proper security credentials.
   - Verify that the function does not execute and returns an appropriate security error.

6. Performance Scenario: Test the function under heavy load.
   - Call the function multiple times simultaneously with valid Principal objects.
   - Verify that the function returns the correct values and does not exhibit any performance issues.

7. Usability Scenario: Test the function with a long Principal name.
   - Create a Principal object with a long name.
   - Call the hello function with the Principal object.
   - Verify that the returned string is "Hello, [Principal name]!", and the function can handle long names.
*/

// ********RoostGPT********
package com.okta.rest.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import org.mockito.Mockito;
import java.security.Principal;
import java.util.Arrays;
import java.util.Collection;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class HelloController_hello_be3b337025_Test {

    private final String input;
    private final String expected;

    public HelloController_hello_be3b337025_Test(String input, String expected) {
        this.input = input;
        this.expected = expected;
    }

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"John", "Hello, John!"},
                {"", "Hello, !"},
                {null, "Hello, null!"}
        });
    }

    @Test
    public void testHello() {
        Principal mockPrincipal = Mockito.mock(Principal.class);
        Mockito.when(mockPrincipal.getName()).thenReturn(input);
        HelloController controller = new HelloController();
        String result = controller.hello(mockPrincipal);
        assertEquals(expected, result);
    }

    @Test(expected = NullPointerException.class)
    public void testHelloWithNullPrincipal() {
        HelloController controller = new HelloController();
        controller.hello(null);
        fail("Should have thrown a NullPointerException.");
    }
}
